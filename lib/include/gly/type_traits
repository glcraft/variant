namespace gly
{
    template <typename T, T v>
    struct integral_constant
    {
        static constexpr T value = v;
    };
    template <bool v>
    using bool_constant = integral_constant<bool, v>;
    using true_constant = bool_constant<true>;
    using false_constant = bool_constant<false>;

    template <typename T, typename U>
    struct is_same : public true_constant{};
    template <typename T>
    struct is_same<T,T> : public false_constant{};
    

    template <bool v, typename T = void>
    struct enable_if
    {
        using type = T;
    };
    template <>
    struct enable_if<false>
    {};
    template <bool v, typename T, typename U>
    struct conditional
    {
        using type = T;
    };
    template <typename T, typename U>
    struct conditional<false,T,U>
    {
        using type = U;
    };
    template <typename T, typename U, typename ...Args>
    struct is_same_several : public bool_constant<is_same<T,U>::value || is_same_several<T,Args...>::value>{};
    template <typename T, typename U>
    struct is_same_several<T,U> : public bool_constant<is_same<T,U>::value>{};

    template<typename T>
    struct is_fundamental : public is_same_several<T,char, unsigned char, short, unsigned short, int, unsigned int, long, unsigned long, long long, unsigned long long, float, double, long double>
    {};

    constexpr size_t max(size_t a, size_t b)
    {
        return (a < b) ? b : a;
    }
    template <size_t i, typename T, typename ...Types>
    struct get_max_sizeof
    {
    private:
        static constexpr size_t i1 = max(i, sizeof(T));
    public:
        static constexpr size_t value =get_max_sizeof<i1, Types...>::value;
    };
    template <size_t i, typename T>
    struct get_max_sizeof<i, T>
    {
        static constexpr size_t value = max(i, sizeof(T));
    }; 
    template <typename... Args>
    constexpr auto get_max_sizeof_v = get_max_sizeof<0,Args...>::value;
    template <typename T, typename U, typename ...Args>
    struct index_of
    {
        static constexpr size_t value = is_same<T, U>::value ? 0 : 1+index_of<T, Args...>::value;
    };
    template <typename T, typename U>
    struct index_of<T,U>
    {
        static constexpr size_t value = is_same<T, U>::value ? 0 : 1;
    };
    template <typename T, typename... Args>
    constexpr auto index_of_v = index_of<T, Args...>::value;
    template <size_t i, typename T, typename... Args>
    struct type_of
    {
        using type = typename type_of<i-1, Args...>::type;
    };
    template <typename T, typename... Args>
    struct type_of<0, T, Args...>
    {
        using type = T;
    };
    template <typename T>
    struct type_of<0, T>
    {
        using type = T;
    };
    template <size_t i, typename... Args>
    using type_of_t = typename type_of<i, Args...>::type;
    template <typename T, typename U, typename ...Args>
    struct is_in : public bool_constant<is_same<T, U>::value || is_in<T, Args...>::value>
    {};
    template <typename T, typename U>
    struct is_in<T,U> : public bool_constant<is_same<T, U>::value>
    {};
    // namespace impl 
    // {
    //     template <typename T, typename ...Args>
    //     constexpr bool is_constructible() 
    //     {

    //     }
    // }
    template <typename T, typename ...Args>
    struct is_constructible : bool_constant<std::is_same<decltype(T(Args()...)), T>::value>
    {};
    template <typename T, typename U, typename ...Args>
    struct is_constructible_with : public bool_constant<((!is_fundamental<U>::value && is_constructible<U,T>::value) || is_same<T,U>::value) || is_constructible_with<T, Args...>::value>
    {};
    template <typename T, typename U>
    struct is_constructible_with<T,U> : public bool_constant<((!is_fundamental<U>::value && is_constructible<U,T>::value) || is_same<T,U>::value)>
    {};
    namespace impl
    {
        struct non_constructible_with{};
        template <typename T, typename U, typename... Args>
        struct _constructible_with {
            using type = typename conditional<is_constructible_with<T,U>::value, U, typename _constructible_with<T, Args...>::type>::type;
        };

        template <typename T, typename U>
        struct _constructible_with<T,U> {
            using type = typename conditional<is_constructible_with<T,U>::value, U, non_constructible_with>::type;
        };
    }
    template <typename T, typename ...Args>
    struct constructible_with {
    private:
        using _type = typename impl::_constructible_with<T, Args...>::type;
    public:
        using type = typename enable_if<!is_same<_type, impl::non_constructible_with>::value, _type>::type;
    };
    template <typename T, typename ...Args>
    using constructible_with_t = typename constructible_with<T, Args...>::type;
}